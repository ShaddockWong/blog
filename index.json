
[{"content":"","date":"2024-7-3","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"2024-7-3","externalUrl":null,"permalink":"/tags/hadoop/","section":"Tags","summary":"","title":"Hadoop","type":"tags"},{"content":"","date":"2024-7-3","externalUrl":null,"permalink":"/categories/hadoop/","section":"Categories","summary":"","title":"Hadoop","type":"categories"},{"content":"这篇文章并非原厂，是之前在网上找的，Hadoop MapReduce 的流程图，觉得很不错，就是网上的图太糊了，在这里重置一下。MR 作为大数据处理的基石，顺便梳理一下 MR 的流程。\nMapReduce 一共有 7 个角色参与，分为 4 个大阶段，7 个小阶段。分别是：\n任务启动阶段 由 Client 端发起请求； YarnRunner 接受请求并申请资源； ResourceManager 检索资源情况，分配资源路径给 YarnRunner； YarnRunner 进行分配，申请启动 MRAppMaster； ResourceManager 根据分片和 job 等信息，选择数据所在节点启动 MapTask（程序找数据），唤醒MRAppMaster； MRAppMaster 启动，持续监控和管理任务； MapTask 启动，开始干活； Map 阶段 数据读取，每个 task 读取自己节点上的数据； 数据处理 每个 task 对自己读取到的数据进行 split，分成更小的数据块； 对每个 split 的数据进行 map，提取 key、value、con； 对数据进行分区，有条件建议自定义分区，可以解决数据倾斜的问题，对之后的 reduce 也有极大的优化； 数据进入环形缓冲区，以起始点为赤道，到达溢出比后，刷新赤道； 溢出的数据刷入 sort 进行排序； 排序号的数据放入 spill，进行 merge 后有序写入 HDFS； Reduce 阶段 Reduce 启动 MRAppMaster 监控到 reduce 任务即将结束，开始申请启动 ReduceTask；RM 接受申请，根据分区结果，启动若干 ReduceTask。 ReduceTask启动，把每个 map 结果中的不同分区的数据，shuffle 数据到对应 ReduceTask 所在节点的缓存。 数据处理 在缓存中对每个 sotr 进行 merge（内存、缓存都有）； 将 merge 后的结果，重新进行 spill，排序后，落到 HDFS； 将所有小文件 merge 成一个大文件； Reduce 阶段 调用 Reduce 函数，对排序好的 file 进行汇总； 将最终结果写入到 HDFS 中； 任务结束阶段 MRAppMaster 监控到每个 Reduce 节点的执行情况； 向上汇报，并申请注销自己； RM 注销 MRAppMaster，并向上汇报； YarnRunner 返回任务完成信息； 客户端接受信息，任务结束。 整体流程图如下：\n\u0026hellip; 无奈，图片比较大，显示效果特别差，只能放链接了，后边想办法优化。\n链接：https://pan.baidu.com/s/1cF2CDo5NAzI7vOtQgvo_nw?pwd=r85y\n提取码：r85y\n","date":"2024-7-3","externalUrl":null,"permalink":"/posts/mr-image/","section":"Posts","summary":"","title":"MapReduce流程图（重制版）","type":"posts"},{"content":"","date":"2024-7-3","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2024-7-3","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2024-7-3","externalUrl":null,"permalink":"/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/","section":"Tags","summary":"","title":"大数据","type":"tags"},{"content":"弱小和无知不是生存的障碍，傲慢才是。\n三体\n","date":"2024-7-3","externalUrl":null,"permalink":"/","section":"你应该看不见我吧","summary":"","title":"你应该看不见我吧","type":"page"},{"content":"","date":"2024-6-28","externalUrl":null,"permalink":"/tags/blog/","section":"Tags","summary":"","title":"Blog","type":"tags"},{"content":"","date":"2024-6-28","externalUrl":null,"permalink":"/categories/%E5%8D%9A%E5%AE%A2/","section":"Categories","summary":"","title":"博客","type":"categories"},{"content":" 选型 # 在 Hexo 和 Hugo 之间纠结了很久，开始尝试使用 Hexo 构建博客，搭建很快，主题很多，生成页面也比较漂亮，但是构建速度慢，外加没有找到自己喜欢的配色。再次尝试使用 Hugo 搭建，构建真快，主题也多，Blowfish 主题文档也全，使用体验真的没话说。\n前置条件 # 使用 Hugo 前，需要自己安装 Go 语言，Node.js，Git 等环境。安装很简单，本人是window系统，下载 amd64 位安装包，点点点，安装完成后验证就可以了。\nHugo 的安装需要注意，直接从 github 上下载 releases 版本的压缩包，解压缩后配置环境变量。Hugo 大部分主题都需要一些高级功能，所以直接下载 扩展版。\n配置好环境变量后，在 CMD 命令行查看是否安装成功。\nhugo version ## 出现如下提示，即为安装成功 hugo v0.128.0-e6d2712ee062321dc2fc49e963597dd5a6157660+extended windows/amd64 BuildDate=2024-06-25T16:15:48Z VendorInfo=gohugoio 开始搭建 # 其实 Hugo 中文文档 和 Blowfish 文档 已经很详细了，这里简要总结一下:\n使用 Hugo 构建项目 # Hugo new site your-site # your-site 请自行修改为自己的项目目录 cd your-site 注意，Hugo new site 要求文件夹必须为空，哪怕是有隐藏文件夹也会导致初始化失败。\n初始化后目录结构如下：\ngit init 各位可以先在 GitHub 上新建一个空白仓库，然后 git clone 下来。\nHugo new site your-site之后，将 .git 文件夹拷贝到 your-site 文件夹下，这样方便后续代码提交。\n安装主题 # 主题我这里使用的是 Blowfish 主题，优点是文档很全，而且文档支持中文，提供了多种主页布局方式和网站配色。我最喜欢的是‘Avocado’这个配色的深色模式，看起来很舒服。\n不建议使用 Blowfish-Tools 工具安装，除非你对 Hugo 框架很熟悉，知道每一个步骤都是在干什么，否则，不推荐使用它。\n推荐使用 使用 Git 子模块安装 主题。\ngit submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish 下载好之后，目录 themes 中就会多出来一个 blowfish 的目录，里边就是主题的默认内容。\n设置主题的配置文件 # 在根目录中，删除 Hugo 自动生成的 hugo.toml 文件。从目录 themes/blowfish/config/_default 中复制 *.toml 文件，粘贴到 config/_default/ 目录中。Hugo 可以将这些配置统一放在一个 toml 文件中，也可以分多个 toml 文件，便于更好的管理。\n接着一定要设置 config/_default/hugo.toml 中的 theme = \u0026quot;blowfish\u0026quot;，这样才能使用对用的主题。\n关于 Blowfish 主题如何配置和使用，官网介绍已经很全了，详细内容请查看官网文档：Blowfish 文档 。\n接下来只说几个重要的点：\n自定义网站图标 # Blowfish 主题默认的网站图标是一条蓝色的小河豚，我们可以自定义自己喜欢的图标做自己的网站图标。\n网站图标资源的位置在 static/ 文件夹中，名称必须和下面的名称一样。如果使用了favicon.io，那么下载下来解压后的文件名和下面是完全一致的，直接拷贝到 static/ 中即可。\nstatic/ ├─ android-chrome-192x192.png ├─ android-chrome-512x512.png ├─ apple-touch-icon.png ├─ favicon-16x16.png ├─ favicon-32x32.png ├─ favicon.ico └─ site.webmanifest 用 Hugo 创建文章 # 用 Hugo 创建一篇文章的命令是：\nhugo new xxx.md 用这个命令创建的 Markdown 文件会套用 archetypes 文件夹中的 front matter 模版，在空白处用 Markdown 写入内容。\n其中，draft = true 代表这篇文章是一个草稿，Hugo 生成页面不会显示草稿，要在主页显示此文章，可以设置 draft = false ，或者直接删掉这行。\n本地调试和预览 # 在发布到网站前，我们可以在本地预览网站的内容和效果，运行命令：\nhugo server 启动完成后，在浏览器输入 http//localhost:1313/ 可以实时预览生成的网站效果。\n使用上边的命令后，会发现文档上 draft = false 的文章不会显示，需要修改启动参数：\nhugo server -D 这样，草稿文章内容也会显示了。\n使用 GitHub Page 构建网站 # Hugo 提供非常详尽的 GitHub Pages 部署指引。这里对部署过程做简单梳理：\n在 ./.github/workflows/ 中放入 hugo.yml；\n将本地网站同步到 GitHub 同名仓库；\n在仓库设置 Settings -\u0026gt; Pages 中选择 Build and deployment 选择 GitHub Actions,将 Hugo 推送到 GitHub 上时,便会自动构建网页。\n完成以上步骤，你便可以通过 https://\u0026lt;your-github-id\u0026gt;.github.io 访问自己的个人博客。\n","date":"2024-6-28","externalUrl":null,"permalink":"/posts/build-blog/","section":"Posts","summary":"","title":"利用 GitHub Pages + Hugo 搭建个人博客","type":"posts"},{"content":"","date":"2024-6-28","externalUrl":null,"permalink":"/tags/%E7%BD%91%E7%AB%99/","section":"Tags","summary":"","title":"网站","type":"tags"},{"content":" 一直在想，是不是做一个博客比较好，抽点时间，记录些东西也挺好。\n纠结了两天用哪个组件建立博客，看了 hexo、hugo 和 astro 三个组件，尝试了 hexo 和 hugo，最终还是决定用 hugo。\n其实在很早之前，我就想做一个自己的博客，记录下自己的学习和成长，哪怕不是技术相关的也好。人生的成长，技术只是一个方面，更多的还有思想、情商。技术力是很重要的一个方面，但也仅仅只是一个方面。\n小时候希望自己长大了当个科学家（貌似当时的教育，大家都是科学家）， 只知道学习，但是还学不好。考了个一般的本科，学了个一般的专业（土木🐶），找了个一般的工作。本想着在自己的专业做出点名堂，谁知道被社会狠狠的毒打。对于工地上的风气，我是深恶痛绝，再加上每周只能歇一天，我果断选择了转行，脱离了苦海。\n我也是挺佩服自己的，什么都不懂，就敢转行，想想年起的自己真的是很有胆量。于是听了同学减建议，背着书包，离开家乡，跑到帝都，租个破房，孤身一人，开始闯荡。一路从 JAVA 干到 大数据，甚至做过前端 VUE 项目，差点把自己干成全栈。熬了这么多年，目前只是一个不合格的组长（2024年）。\n庆幸自己转行的比较早，就目前这个形式，土木感觉都成夕阳行业了，IT 也不再是风口浪尖了，后续给人吹牛，还可以说自己是在浪尖待过那么一段时间的人呢，哈哈。\n趁自己还没老，抓紧做自己喜欢的事情。及时行乐，何尝不是一种洒脱。趁现在，从构建一个博客开始，加油，做自己想做的事情吧。\n","date":"2024-6-25","externalUrl":null,"permalink":"/posts/beginning/","section":"Posts","summary":"","title":"开篇","type":"posts"},{"content":"","date":"2024-6-25","externalUrl":null,"permalink":"/tags/%E9%9A%8F%E6%83%B3/","section":"Tags","summary":"","title":"随想","type":"tags"},{"content":"","date":"2024-6-25","externalUrl":null,"permalink":"/categories/%E6%9D%82%E9%A1%B9/","section":"Categories","summary":"","title":"杂项","type":"categories"},{"content":"","date":"0001-1-1","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"0001-1-1","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]